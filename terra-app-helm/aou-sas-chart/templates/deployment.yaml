apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        - name: sasregistry
      serviceAccountName: "{{- .Values.serviceAccount.name }}"
      securityContext:
        fsGroup: 2000
        fsGroupChangePolicy: "OnRootMismatch"
      volumes:
        - name: {{ include "app.fullname" . }}-storage
          persistentVolumeClaim:
            claimName: {{ include "app.fullname" . }}-pvc
        - name: sas-licence-file
          secret:
            secretName: sas-licence
      containers:
        - name: wondershaper
          image: "us.gcr.io/broad-dsp-gcr-public/wondershaper:0.0.1"
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
          resources: {}
        - name: aou-sas
          image: "cr.sas.com/viya-4-x64_oci_linux_2-docker/sas-analytics-pro:0.27.24-20230707.1688767835039"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
            runAsGroup: 0
          env:
            - name: RUN_MODE
              value: "developer"
            - name: HOST_AUTH
              value: ""
            - name: SAS_DEBUG
              value: "0"
            - name: PRE_DEPLOY_SCRIPT
              value: |
                sed -i "s/RequestHeader/#RequestHeader/g" /etc/httpd/conf.d/dkrapro-proxy.conf;
                echo ProxyPassReverseCookiePath /SASStudio /"{{ .Values.ingress.proxyPath }}"/SASStudio >> /etc/httpd/conf.d/dkrapro-proxy.conf; 
                echo AddOutputFilterByType SUBSTITUTE text/html > /etc/httpd/conf.d/substitute.conf; 
                echo AddOutputFilterByType SUBSTITUTE text/css >> /etc/httpd/conf.d/substitute.conf; 
                echo AddOutputFilterByType SUBSTITUTE application/x-javascript >> /etc/httpd/conf.d/substitute.conf; 
                echo AddOutputFilterByType SUBSTITUTE application/javascript >> /etc/httpd/conf.d/substitute.conf;
                echo AddOutputFilterByType SUBSTITUTE text/xml >> /etc/httpd/conf.d/substitute.conf; 
                echo Substitute "s|/SASStudio/|"{{ .Values.ingress.proxyPath }}"/SASStudio/|n" >> /etc/httpd/conf.d/substitute.conf; 
                useradd -m -d /data -g sas -s /bin/bash aou; echo "aou:aou" | chpasswd
            - name: SASLICENSEFILE
              value: SASLicense.jwt
            - name: JAVA_OPTION_SAS_COMMONS_WEB_SECURITY_CORS_ALLOWEDORIGINS
              value: "-Dsas.commons.web.security.cors.allowedOrigins=*"
            - name: JAVA_OPTION_SAS_COMMONS_WEB_SECURITY_CORS_ALLOWCREDENTIALS
              value: "-Dsas.commons.web.security.cors.allowCredentials=false"
            - name: JAVA_OPTION_SAS_COMMONS_WEB_SECURITY_CORS_ALLOWEDHEADERS
              value: "-Dsas.commons.web.security.cors.allowedHeaders=*"
            - name: JAVA_OPTION_SAS_COMMONS_WEB_SECURITY_CORS_ALLOWEDMETHODS
              value: "-Dsas.commons.web.security.cors.allowedMethods=OPTIONS,POST,PUT,GET,DELETE,HEAD,PATCH"
            - name: JAVA_OPTION_SAS_COMMONS_WEB_SECURITY_CSRF
              value: "-Dsas.commons.web.security.csrf.enable-csrf=false"
          ports:
            - name: sas-http
              containerPort: 80
              protocol: TCP
          volumeMounts:
            - mountPath: "/data"
              name: {{ include "app.fullname" . }}-storage
            - name: sas-licence-file
              mountPath: "/opt/sas/viya/config/SASLicense.jwt"
              subPath: SASLicense.jwt
          resources: {}
        - name: welder
          image: "us.gcr.io/broad-dsp-gcr-public/welder-server:6648f5c"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: CLOUD_PROVIDER
              value: "gcp"
            - name: LOCKING_ENABLED
              value: "false"
            - name: SHOULD_BACKGROUND_SYNC
              value: "true"
            - name: STORAGE_CONTAINER_RESOURCE_ID
              value: "dummy"
            - name: STAGING_STORAGE_CONTAINER_RESOURCE_ID
              value: "dummy"
            - name: PORT
              value: "8080"
            {{- range .Values.welder.extraEnv }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          ports:
            - name: welder-http
              containerPort: 8080
              protocol: TCP
          volumeMounts:
            - mountPath: "/work"
              name: {{ include "app.fullname" . }}-storage
          resources: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
