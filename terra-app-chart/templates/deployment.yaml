apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: "{{- .Values.serviceAccount.name }}"
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: {{ include "app.fullname" . }}-storage
          persistentVolumeClaim:
            claimName: {{ include "app.fullname" . }}-pvc
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.image }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.image.command }}
          command:
            {{- range .Values.image.command }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.image.args }}
          args: 
            {{- range .Values.image.args }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          env:
          {{ include "app.podEnvVars" $ }}
          ports:
            - name: http
              containerPort: {{ .Values.image.port }}
              protocol: TCP
          volumeMounts:
            - mountPath: "{{ .Values.persistence.mountPath -}}"
              name: {{ include "app.fullname" . }}-storage
          livenessProbe:
            httpGet:
              path: "{{ .Values.image.baseUrl }}"
              port: http
          readinessProbe:
            httpGet:
              path: "{{ .Values.image.baseUrl }}"
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.welderEnabled }}
          - name: welder
            image: "us.gcr.io/broad-dsp-gcr-public/welder-server"
            env:
              GOOGLE_PROJECT: "${GOOGLE_PROJECT}"
              STAGING_BUCKET: "${STAGING_BUCKET}"
              CLUSTER_NAME: "${RUNTIME_NAME}"
              RUNTIME_NAME: "${RUNTIME_NAME}"
              OWNER_EMAIL: "${OWNER_EMAIL}"
              IS_RSTUDIO_RUNTIME: "${IS_RSTUDIO_RUNTIME}"
              CLOUD_PROVIDER: gcp
              LOCKING_ENABLED: "true"
              PORT: 8080
              # The following envs aren't needed for GCP. But use dummy values just so welder will be able to read config properly
              WSM_URL: "dummy"
              WORKSPACE_ID: "dummy"
              STORAGE_CONTAINER_RESOURCE_ID: "dummy"
              STAGING_STORAGE_CONTAINER_RESOURCE_ID: "dummy"
            commands:
        {{- end }}
          - name: cryptominingDetector
            image: "gcr.io/broad-dsp-gcr-public/cryptomining-detector"
            commands:
              ''
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
