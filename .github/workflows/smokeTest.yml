# This is workflow designed to test all supported apps in parallel 
name: App Smoke Test
# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "test"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    strategy:
      # means we do not want a failure in a single app's smoketest to cause others to fail. Can be changed
      fail-fast: false
      # add new apps to be smoke tested to the array below
      matrix:
       app: [jupyter, ucsc-genome-browser, rstudio, cellxgene, cirrocumulus]
    env:
      APP_NAME: ${{ matrix.app }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out repo under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2


      - name: Setup data for tests and perform system installs
        run: |
          sudo apt-get install jq
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      # If this step gets overly complex, consider splitting it up
      # It would be preferable to have this elsewhere, but only the workflow knows the github workspace, and making the mount-string a relative path is problematic
      - name: Get Minikube args
        run: |
          ARGS=(--no-vtx-check --driver=none --vm=true)
          if [[ $(jq -r --arg key1 "$APP_NAME" '.[$key1]."has-mount"' < ci-config.json) == "true" ]]; 
            then ARGS+=("--mount --mount-string=$GITHUB_WORKSPACE/test:/data"); 
          fi
          echo "MINIKUBE_ARGS=${ARGS[@]}" >> $GITHUB_ENV

      - name: Minikube install and start
        run : |
         sudo apt-get install conntrack
         curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
         sudo install minikube-linux-amd64 /usr/bin/minikube
         sudo chmod +x /usr/bin/minikube
         minikube start ${{ env.MINIKUBE_ARGS }}
         minikube mount $GITHUB_WORKSPACE/test:/data
          
      # below is a plugin for minikube if maintaining the above gets arduous https://github.com/marketplace/actions/setup-minikube-kubernetes-cluster
      # it supports our use case at the time of writing, but it is not clear exactly what it is passing to `minikube start`
      # - name: Setup Minikube
      #   uses: manusa/actions-setup-minikube@v2.3.1
      #   with:
      #     minikube version: 'v1.16.0'
      #     kubernetes version: 'v1.19.2'
      #     github token: ${{ secrets.GITHUB_TOKEN }}
      #     start args: "${{ env.MINIKUBE_ARGS }}"
          
      - name: Run smoke test on app 
        run: |
          sudo echo "$(minikube ip) $(jq -r .hostname < ci-config.json)" | sudo tee -a /etc/hosts
          ./test/smoke-test.sh $APP_NAME

